// Code generated by protoc-gen-go. DO NOT EDIT.
// source: descriptions.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	descriptions.proto

It has these top-level messages:
	SandboxConfig
	ContainerDescription
	VolumeDescription
	InterfaceDescription
	PortDescription
	NeighborNetworks
	VolumeReference
	VolumeMount
	VolumeOption
	UserGroupInfo
	Rlimit
	Process
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SandboxConfig struct {
	Hostname   string            `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Dns        []string          `protobuf:"bytes,2,rep,name=dns" json:"dns,omitempty"`
	Neighbors  *NeighborNetworks `protobuf:"bytes,3,opt,name=neighbors" json:"neighbors,omitempty"`
	DnsOptions []string          `protobuf:"bytes,4,rep,name=dnsOptions" json:"dnsOptions,omitempty"`
	DnsSearch  []string          `protobuf:"bytes,5,rep,name=dnsSearch" json:"dnsSearch,omitempty"`
}

func (m *SandboxConfig) Reset()                    { *m = SandboxConfig{} }
func (m *SandboxConfig) String() string            { return proto.CompactTextString(m) }
func (*SandboxConfig) ProtoMessage()               {}
func (*SandboxConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SandboxConfig) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *SandboxConfig) GetDns() []string {
	if m != nil {
		return m.Dns
	}
	return nil
}

func (m *SandboxConfig) GetNeighbors() *NeighborNetworks {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

func (m *SandboxConfig) GetDnsOptions() []string {
	if m != nil {
		return m.DnsOptions
	}
	return nil
}

func (m *SandboxConfig) GetDnsSearch() []string {
	if m != nil {
		return m.DnsSearch
	}
	return nil
}

type ContainerDescription struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Static Info, got from client input
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image string `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	// User content or user specified behavior
	Labels     map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tty        bool              `protobuf:"varint,5,opt,name=tty" json:"tty,omitempty"`
	StopSignal string            `protobuf:"bytes,6,opt,name=stopSignal" json:"stopSignal,omitempty"`
	// Creation Info, got during creation
	RootVolume *VolumeDescription `protobuf:"bytes,7,opt,name=rootVolume" json:"rootVolume,omitempty"`
	MountId    string             `protobuf:"bytes,8,opt,name=mountId" json:"mountId,omitempty"`
	RootPath   string             `protobuf:"bytes,9,opt,name=rootPath" json:"rootPath,omitempty"`
	// runtime info, combined during creation
	UGI        *UserGroupInfo              `protobuf:"bytes,10,opt,name=UGI" json:"UGI,omitempty"`
	Envs       map[string]string           `protobuf:"bytes,11,rep,name=envs" json:"envs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Workdir    string                      `protobuf:"bytes,12,opt,name=workdir" json:"workdir,omitempty"`
	Path       string                      `protobuf:"bytes,13,opt,name=path" json:"path,omitempty"`
	Args       []string                    `protobuf:"bytes,14,rep,name=args" json:"args,omitempty"`
	Rlimits    []*Rlimit                   `protobuf:"bytes,15,rep,name=rlimits" json:"rlimits,omitempty"`
	Sysctl     map[string]string           `protobuf:"bytes,16,rep,name=sysctl" json:"sysctl,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Volumes    map[string]*VolumeReference `protobuf:"bytes,17,rep,name=volumes" json:"volumes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Initialize bool                        `protobuf:"varint,24,opt,name=initialize" json:"initialize,omitempty"`
}

func (m *ContainerDescription) Reset()                    { *m = ContainerDescription{} }
func (m *ContainerDescription) String() string            { return proto.CompactTextString(m) }
func (*ContainerDescription) ProtoMessage()               {}
func (*ContainerDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ContainerDescription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ContainerDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerDescription) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ContainerDescription) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ContainerDescription) GetTty() bool {
	if m != nil {
		return m.Tty
	}
	return false
}

func (m *ContainerDescription) GetStopSignal() string {
	if m != nil {
		return m.StopSignal
	}
	return ""
}

func (m *ContainerDescription) GetRootVolume() *VolumeDescription {
	if m != nil {
		return m.RootVolume
	}
	return nil
}

func (m *ContainerDescription) GetMountId() string {
	if m != nil {
		return m.MountId
	}
	return ""
}

func (m *ContainerDescription) GetRootPath() string {
	if m != nil {
		return m.RootPath
	}
	return ""
}

func (m *ContainerDescription) GetUGI() *UserGroupInfo {
	if m != nil {
		return m.UGI
	}
	return nil
}

func (m *ContainerDescription) GetEnvs() map[string]string {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *ContainerDescription) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func (m *ContainerDescription) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ContainerDescription) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *ContainerDescription) GetRlimits() []*Rlimit {
	if m != nil {
		return m.Rlimits
	}
	return nil
}

func (m *ContainerDescription) GetSysctl() map[string]string {
	if m != nil {
		return m.Sysctl
	}
	return nil
}

func (m *ContainerDescription) GetVolumes() map[string]*VolumeReference {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *ContainerDescription) GetInitialize() bool {
	if m != nil {
		return m.Initialize
	}
	return false
}

type VolumeDescription struct {
	Name         string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Source       string        `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Format       string        `protobuf:"bytes,3,opt,name=format" json:"format,omitempty"`
	Fstype       string        `protobuf:"bytes,4,opt,name=fstype" json:"fstype,omitempty"`
	Options      *VolumeOption `protobuf:"bytes,8,opt,name=options" json:"options,omitempty"`
	DockerVolume bool          `protobuf:"varint,9,opt,name=dockerVolume" json:"dockerVolume,omitempty"`
	ReadOnly     bool          `protobuf:"varint,10,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *VolumeDescription) Reset()                    { *m = VolumeDescription{} }
func (m *VolumeDescription) String() string            { return proto.CompactTextString(m) }
func (*VolumeDescription) ProtoMessage()               {}
func (*VolumeDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VolumeDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeDescription) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *VolumeDescription) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *VolumeDescription) GetFstype() string {
	if m != nil {
		return m.Fstype
	}
	return ""
}

func (m *VolumeDescription) GetOptions() *VolumeOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *VolumeDescription) GetDockerVolume() bool {
	if m != nil {
		return m.DockerVolume
	}
	return false
}

func (m *VolumeDescription) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type InterfaceDescription struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Lo      bool   `protobuf:"varint,2,opt,name=lo" json:"lo,omitempty"`
	Bridge  string `protobuf:"bytes,3,opt,name=bridge" json:"bridge,omitempty"`
	Ip      string `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Mac     string `protobuf:"bytes,5,opt,name=mac" json:"mac,omitempty"`
	Gw      string `protobuf:"bytes,6,opt,name=gw" json:"gw,omitempty"`
	TapName string `protobuf:"bytes,7,opt,name=tapName" json:"tapName,omitempty"`
	Options string `protobuf:"bytes,8,opt,name=options" json:"options,omitempty"`
}

func (m *InterfaceDescription) Reset()                    { *m = InterfaceDescription{} }
func (m *InterfaceDescription) String() string            { return proto.CompactTextString(m) }
func (*InterfaceDescription) ProtoMessage()               {}
func (*InterfaceDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InterfaceDescription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InterfaceDescription) GetLo() bool {
	if m != nil {
		return m.Lo
	}
	return false
}

func (m *InterfaceDescription) GetBridge() string {
	if m != nil {
		return m.Bridge
	}
	return ""
}

func (m *InterfaceDescription) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *InterfaceDescription) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *InterfaceDescription) GetGw() string {
	if m != nil {
		return m.Gw
	}
	return ""
}

func (m *InterfaceDescription) GetTapName() string {
	if m != nil {
		return m.TapName
	}
	return ""
}

func (m *InterfaceDescription) GetOptions() string {
	if m != nil {
		return m.Options
	}
	return ""
}

type PortDescription struct {
	HostPort      int32  `protobuf:"varint,1,opt,name=hostPort" json:"hostPort,omitempty"`
	ContainerPort int32  `protobuf:"varint,2,opt,name=containerPort" json:"containerPort,omitempty"`
	Protocol      string `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *PortDescription) Reset()                    { *m = PortDescription{} }
func (m *PortDescription) String() string            { return proto.CompactTextString(m) }
func (*PortDescription) ProtoMessage()               {}
func (*PortDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PortDescription) GetHostPort() int32 {
	if m != nil {
		return m.HostPort
	}
	return 0
}

func (m *PortDescription) GetContainerPort() int32 {
	if m != nil {
		return m.ContainerPort
	}
	return 0
}

func (m *PortDescription) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type NeighborNetworks struct {
	InternalNetworks []string `protobuf:"bytes,1,rep,name=internalNetworks" json:"internalNetworks,omitempty"`
	ExternalNetworks []string `protobuf:"bytes,2,rep,name=externalNetworks" json:"externalNetworks,omitempty"`
}

func (m *NeighborNetworks) Reset()                    { *m = NeighborNetworks{} }
func (m *NeighborNetworks) String() string            { return proto.CompactTextString(m) }
func (*NeighborNetworks) ProtoMessage()               {}
func (*NeighborNetworks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NeighborNetworks) GetInternalNetworks() []string {
	if m != nil {
		return m.InternalNetworks
	}
	return nil
}

func (m *NeighborNetworks) GetExternalNetworks() []string {
	if m != nil {
		return m.ExternalNetworks
	}
	return nil
}

type VolumeReference struct {
	Name        string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MountPoints []*VolumeMount `protobuf:"bytes,2,rep,name=mountPoints" json:"mountPoints,omitempty"`
}

func (m *VolumeReference) Reset()                    { *m = VolumeReference{} }
func (m *VolumeReference) String() string            { return proto.CompactTextString(m) }
func (*VolumeReference) ProtoMessage()               {}
func (*VolumeReference) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VolumeReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VolumeReference) GetMountPoints() []*VolumeMount {
	if m != nil {
		return m.MountPoints
	}
	return nil
}

type VolumeMount struct {
	Path     string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	ReadOnly bool   `protobuf:"varint,2,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *VolumeMount) Reset()                    { *m = VolumeMount{} }
func (m *VolumeMount) String() string            { return proto.CompactTextString(m) }
func (*VolumeMount) ProtoMessage()               {}
func (*VolumeMount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VolumeMount) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *VolumeMount) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type VolumeOption struct {
	User        string   `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Monitors    []string `protobuf:"bytes,2,rep,name=monitors" json:"monitors,omitempty"`
	Keyring     string   `protobuf:"bytes,3,opt,name=keyring" json:"keyring,omitempty"`
	BytesPerSec int32    `protobuf:"varint,4,opt,name=bytesPerSec" json:"bytesPerSec,omitempty"`
	Iops        int32    `protobuf:"varint,5,opt,name=iops" json:"iops,omitempty"`
}

func (m *VolumeOption) Reset()                    { *m = VolumeOption{} }
func (m *VolumeOption) String() string            { return proto.CompactTextString(m) }
func (*VolumeOption) ProtoMessage()               {}
func (*VolumeOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VolumeOption) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *VolumeOption) GetMonitors() []string {
	if m != nil {
		return m.Monitors
	}
	return nil
}

func (m *VolumeOption) GetKeyring() string {
	if m != nil {
		return m.Keyring
	}
	return ""
}

func (m *VolumeOption) GetBytesPerSec() int32 {
	if m != nil {
		return m.BytesPerSec
	}
	return 0
}

func (m *VolumeOption) GetIops() int32 {
	if m != nil {
		return m.Iops
	}
	return 0
}

type UserGroupInfo struct {
	User             string   `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Group            string   `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	AdditionalGroups []string `protobuf:"bytes,3,rep,name=additionalGroups" json:"additionalGroups,omitempty"`
}

func (m *UserGroupInfo) Reset()                    { *m = UserGroupInfo{} }
func (m *UserGroupInfo) String() string            { return proto.CompactTextString(m) }
func (*UserGroupInfo) ProtoMessage()               {}
func (*UserGroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UserGroupInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserGroupInfo) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *UserGroupInfo) GetAdditionalGroups() []string {
	if m != nil {
		return m.AdditionalGroups
	}
	return nil
}

type Rlimit struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Hard uint64 `protobuf:"varint,2,opt,name=hard" json:"hard,omitempty"`
	Soft uint64 `protobuf:"varint,3,opt,name=soft" json:"soft,omitempty"`
}

func (m *Rlimit) Reset()                    { *m = Rlimit{} }
func (m *Rlimit) String() string            { return proto.CompactTextString(m) }
func (*Rlimit) ProtoMessage()               {}
func (*Rlimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Rlimit) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Rlimit) GetHard() uint64 {
	if m != nil {
		return m.Hard
	}
	return 0
}

func (m *Rlimit) GetSoft() uint64 {
	if m != nil {
		return m.Soft
	}
	return 0
}

type Process struct {
	Container       string   `protobuf:"bytes,1,opt,name=Container" json:"Container,omitempty"`
	Id              string   `protobuf:"bytes,2,opt,name=Id" json:"Id,omitempty"`
	User            string   `protobuf:"bytes,3,opt,name=User" json:"User,omitempty"`
	Group           string   `protobuf:"bytes,4,opt,name=Group" json:"Group,omitempty"`
	AdditionalGroup []string `protobuf:"bytes,5,rep,name=AdditionalGroup" json:"AdditionalGroup,omitempty"`
	Terminal        bool     `protobuf:"varint,6,opt,name=Terminal" json:"Terminal,omitempty"`
	Args            []string `protobuf:"bytes,7,rep,name=Args" json:"Args,omitempty"`
	Envs            []string `protobuf:"bytes,8,rep,name=Envs" json:"Envs,omitempty"`
	Workdir         string   `protobuf:"bytes,9,opt,name=Workdir" json:"Workdir,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Process) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *Process) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Process) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Process) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Process) GetAdditionalGroup() []string {
	if m != nil {
		return m.AdditionalGroup
	}
	return nil
}

func (m *Process) GetTerminal() bool {
	if m != nil {
		return m.Terminal
	}
	return false
}

func (m *Process) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Process) GetEnvs() []string {
	if m != nil {
		return m.Envs
	}
	return nil
}

func (m *Process) GetWorkdir() string {
	if m != nil {
		return m.Workdir
	}
	return ""
}

func init() {
	proto.RegisterType((*SandboxConfig)(nil), "api.SandboxConfig")
	proto.RegisterType((*ContainerDescription)(nil), "api.ContainerDescription")
	proto.RegisterType((*VolumeDescription)(nil), "api.VolumeDescription")
	proto.RegisterType((*InterfaceDescription)(nil), "api.InterfaceDescription")
	proto.RegisterType((*PortDescription)(nil), "api.PortDescription")
	proto.RegisterType((*NeighborNetworks)(nil), "api.NeighborNetworks")
	proto.RegisterType((*VolumeReference)(nil), "api.VolumeReference")
	proto.RegisterType((*VolumeMount)(nil), "api.VolumeMount")
	proto.RegisterType((*VolumeOption)(nil), "api.VolumeOption")
	proto.RegisterType((*UserGroupInfo)(nil), "api.UserGroupInfo")
	proto.RegisterType((*Rlimit)(nil), "api.Rlimit")
	proto.RegisterType((*Process)(nil), "api.Process")
}

func init() { proto.RegisterFile("descriptions.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1050 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x6f, 0x6b, 0x1b, 0x47,
	0x13, 0xe7, 0xce, 0x92, 0x25, 0x8d, 0xe2, 0xd8, 0x59, 0xfc, 0x84, 0x25, 0x3c, 0x14, 0x73, 0x4d,
	0x8a, 0x49, 0xc1, 0x2f, 0x1c, 0x68, 0x9a, 0x42, 0xa0, 0x21, 0x09, 0x41, 0xd0, 0xda, 0x62, 0xdd,
	0xb4, 0xf4, 0xe5, 0xea, 0x6e, 0x25, 0x6f, 0x7d, 0xda, 0x3d, 0x76, 0x57, 0x76, 0xd4, 0x0f, 0xd1,
	0xf7, 0xfd, 0x16, 0x7d, 0xd1, 0x8f, 0xd3, 0x2f, 0xd0, 0x6f, 0x51, 0x66, 0x6e, 0xef, 0x7c, 0x96,
	0x9d, 0x96, 0xbc, 0x9b, 0xf9, 0xdd, 0xcc, 0xec, 0xfc, 0x9f, 0x03, 0x56, 0x28, 0x9f, 0x3b, 0x5d,
	0x05, 0x6d, 0x8d, 0x3f, 0xaa, 0x9c, 0x0d, 0x96, 0x6d, 0xc9, 0x4a, 0x67, 0x7f, 0x24, 0xb0, 0x73,
	0x26, 0x4d, 0x31, 0xb3, 0x1f, 0x5e, 0x5b, 0x33, 0xd7, 0x0b, 0xf6, 0x08, 0x86, 0xe7, 0xd6, 0x07,
	0x23, 0x97, 0x8a, 0x27, 0x07, 0xc9, 0xe1, 0x48, 0xb4, 0x3c, 0xdb, 0x83, 0xad, 0xc2, 0x78, 0x9e,
	0x1e, 0x6c, 0x1d, 0x8e, 0x04, 0x92, 0xec, 0x19, 0x8c, 0x8c, 0xd2, 0x8b, 0xf3, 0x99, 0x75, 0x9e,
	0x6f, 0x1d, 0x24, 0x87, 0xe3, 0xe3, 0xff, 0x1d, 0xc9, 0x4a, 0x1f, 0x9d, 0x44, 0xf4, 0x44, 0x85,
	0x2b, 0xeb, 0x2e, 0xbc, 0xb8, 0x96, 0x63, 0x9f, 0x01, 0x14, 0xc6, 0x9f, 0xd6, 0xde, 0xf0, 0x1e,
	0x59, 0xeb, 0x20, 0xec, 0xff, 0x30, 0x2a, 0x8c, 0x3f, 0x53, 0xd2, 0xe5, 0xe7, 0xbc, 0x4f, 0x9f,
	0xaf, 0x81, 0xec, 0xf7, 0x01, 0xec, 0xbf, 0xb6, 0x26, 0x48, 0x6d, 0x94, 0x7b, 0x73, 0x1d, 0x17,
	0xbb, 0x0f, 0xa9, 0x2e, 0xa2, 0xcf, 0xa9, 0x2e, 0x18, 0x83, 0x1e, 0x45, 0x91, 0x12, 0x42, 0x34,
	0xdb, 0x87, 0xbe, 0x5e, 0xca, 0x85, 0x22, 0x5f, 0x47, 0xa2, 0x66, 0xd8, 0x4b, 0xd8, 0x2e, 0xe5,
	0x4c, 0x95, 0xb5, 0x33, 0xe3, 0xe3, 0x27, 0x14, 0xc2, 0x5d, 0x8f, 0x1c, 0x7d, 0x47, 0x72, 0x6f,
	0x4d, 0x70, 0x6b, 0x11, 0x95, 0x30, 0x2d, 0x21, 0xac, 0x79, 0xff, 0x20, 0x39, 0x1c, 0x0a, 0x24,
	0x31, 0x42, 0x1f, 0x6c, 0x75, 0xa6, 0x17, 0x46, 0x96, 0x7c, 0x9b, 0xde, 0xea, 0x20, 0xec, 0x2b,
	0x00, 0x67, 0x6d, 0xf8, 0xd1, 0x96, 0xab, 0xa5, 0xe2, 0x03, 0xca, 0xdb, 0x43, 0x7a, 0xb4, 0x86,
	0x3a, 0x2f, 0x8a, 0x8e, 0x24, 0xe3, 0x30, 0x58, 0xda, 0x95, 0x09, 0x93, 0x82, 0x0f, 0xc9, 0x68,
	0xc3, 0x62, 0xd9, 0x50, 0x6e, 0x2a, 0xc3, 0x39, 0x1f, 0xd5, 0x65, 0x6b, 0x78, 0xf6, 0x18, 0xb6,
	0xde, 0xbf, 0x9b, 0x70, 0xa0, 0x67, 0x18, 0x3d, 0xf3, 0xde, 0x2b, 0xf7, 0xce, 0xd9, 0x55, 0x35,
	0x31, 0x73, 0x2b, 0xf0, 0x33, 0x7b, 0x0e, 0x3d, 0x65, 0x2e, 0x3d, 0x1f, 0x53, 0x0a, 0x3e, 0xff,
	0x78, 0x0a, 0xde, 0x9a, 0xcb, 0x98, 0x00, 0x52, 0x40, 0xa7, 0xb0, 0xc4, 0x85, 0x76, 0xfc, 0x5e,
	0xed, 0x54, 0x64, 0xb1, 0x02, 0x15, 0x3a, 0xb4, 0x53, 0x57, 0x00, 0x69, 0xc4, 0xa4, 0x5b, 0x78,
	0x7e, 0x9f, 0xea, 0x4a, 0x34, 0x7b, 0x02, 0x03, 0x57, 0xea, 0xa5, 0x0e, 0x9e, 0xef, 0xd2, 0xeb,
	0x63, 0x7a, 0x5d, 0x10, 0x26, 0x9a, 0x6f, 0x58, 0x26, 0xbf, 0xf6, 0x79, 0x28, 0xf9, 0xde, 0x7f,
	0x95, 0xe9, 0x8c, 0xe4, 0x62, 0x99, 0x6a, 0x25, 0xf6, 0x2d, 0x0c, 0x2e, 0x29, 0x8d, 0x9e, 0x3f,
	0x20, 0xfd, 0x2f, 0x3e, 0xae, 0x5f, 0xe7, 0x3b, 0x86, 0xd9, 0xa8, 0x61, 0x59, 0xb5, 0xd1, 0x41,
	0xcb, 0x52, 0xff, 0xaa, 0x38, 0xa7, 0x7a, 0x77, 0x90, 0x47, 0x2f, 0x60, 0xdc, 0xe9, 0x0f, 0xec,
	0x8b, 0x0b, 0xb5, 0x8e, 0x1d, 0x89, 0x24, 0xb6, 0xdf, 0xa5, 0x2c, 0x57, 0x4d, 0x4f, 0xd6, 0xcc,
	0x37, 0xe9, 0xd7, 0xc9, 0xa3, 0xe7, 0x30, 0x6a, 0xf3, 0xfa, 0x49, 0x8a, 0x2f, 0x60, 0xdc, 0x09,
	0xf6, 0x93, 0x54, 0xa7, 0x70, 0xaf, 0x1b, 0xe7, 0x1d, 0xba, 0x4f, 0xbb, 0xba, 0xe3, 0xe3, 0xfd,
	0x4e, 0x8b, 0x0a, 0x35, 0x57, 0x4e, 0x99, 0x5c, 0x75, 0x2c, 0x66, 0x7f, 0x25, 0xf0, 0xe0, 0x56,
	0x07, 0xb7, 0x83, 0x98, 0x74, 0x06, 0xf1, 0x21, 0x6c, 0x7b, 0xbb, 0x72, 0x79, 0xe3, 0x56, 0xe4,
	0x10, 0x9f, 0x5b, 0xb7, 0x94, 0x21, 0x4e, 0x68, 0xe4, 0x08, 0xf7, 0x61, 0x5d, 0x29, 0xde, 0x8b,
	0x38, 0x71, 0xec, 0x4b, 0x18, 0xd8, 0xb8, 0x48, 0x86, 0xe4, 0xe3, 0x83, 0x8e, 0x8f, 0xf5, 0x42,
	0x11, 0x8d, 0x04, 0xcb, 0xe0, 0x5e, 0x61, 0xf3, 0x0b, 0xe5, 0xe2, 0xe0, 0x8d, 0xa8, 0x82, 0x37,
	0x30, 0x1a, 0x24, 0x25, 0x8b, 0x53, 0x53, 0xae, 0x69, 0x62, 0x86, 0xa2, 0xe5, 0xb3, 0x3f, 0x13,
	0xd8, 0x9f, 0x98, 0xa0, 0xdc, 0x5c, 0xe6, 0xea, 0xdf, 0x56, 0xcf, 0x7d, 0x48, 0x4b, 0x4b, 0x91,
	0x0d, 0x45, 0x5a, 0x5a, 0xf4, 0x7e, 0xe6, 0x74, 0xd1, 0xee, 0x9d, 0xc8, 0x91, 0x5e, 0x15, 0x23,
	0x4a, 0x75, 0x85, 0x15, 0x58, 0xca, 0x9c, 0x36, 0xc9, 0x48, 0x20, 0x89, 0x12, 0x8b, 0xab, 0xb8,
	0x41, 0xd2, 0xc5, 0x15, 0x0e, 0x5b, 0x90, 0xd5, 0x89, 0x8c, 0x6b, 0x63, 0x24, 0x1a, 0x16, 0xbf,
	0x74, 0x33, 0x31, 0x6a, 0xc3, 0xce, 0x2c, 0xec, 0x4e, 0xad, 0x0b, 0x5d, 0x87, 0xe3, 0x96, 0x47,
	0x98, 0xdc, 0xee, 0x8b, 0x96, 0x67, 0x8f, 0x61, 0x27, 0x6f, 0x66, 0x82, 0x04, 0x52, 0x12, 0xb8,
	0x09, 0xa2, 0x05, 0xba, 0x23, 0xb9, 0x2d, 0x63, 0x50, 0x2d, 0x9f, 0xfd, 0x02, 0x7b, 0x9b, 0xfb,
	0x9f, 0x3d, 0x85, 0x3d, 0x8d, 0xa9, 0x33, 0xb2, 0x6c, 0x30, 0x9e, 0xd0, 0x0e, 0xb8, 0x85, 0xa3,
	0xac, 0xfa, 0xb0, 0x21, 0x5b, 0x1f, 0x9d, 0x5b, 0x78, 0xf6, 0x33, 0xec, 0x6e, 0x34, 0xe4, 0x9d,
	0xfd, 0x76, 0x0c, 0x63, 0x5a, 0x95, 0x53, 0xab, 0x4d, 0xa8, 0xad, 0x8d, 0x8f, 0xf7, 0x3a, 0xbd,
	0xf2, 0x3d, 0x7e, 0x15, 0x5d, 0xa1, 0xec, 0x25, 0x8c, 0x3b, 0xdf, 0xda, 0x6d, 0x96, 0x74, 0xb6,
	0x59, 0xb7, 0x5b, 0xd2, 0x8d, 0x6e, 0xf9, 0x2d, 0x69, 0xe6, 0xeb, 0xb4, 0x9d, 0x83, 0x95, 0x57,
	0xae, 0x31, 0x80, 0x34, 0x1a, 0x58, 0x5a, 0xa3, 0x03, 0xde, 0xcf, 0x3a, 0xc4, 0x96, 0xc7, 0x8a,
	0x5e, 0xa8, 0xb5, 0xd3, 0x66, 0x11, 0x33, 0xdc, 0xb0, 0xec, 0x00, 0xc6, 0xb3, 0x75, 0x50, 0x7e,
	0xaa, 0xdc, 0x99, 0xca, 0xa9, 0x81, 0xfa, 0xa2, 0x0b, 0xe1, 0x5b, 0xda, 0x56, 0x9e, 0x5a, 0xa9,
	0x2f, 0x88, 0xce, 0x14, 0xec, 0xdc, 0xd8, 0xfb, 0x77, 0x3a, 0xb4, 0x0f, 0xfd, 0x05, 0x0a, 0x34,
	0xeb, 0x82, 0x18, 0xac, 0x88, 0x2c, 0x0a, 0x8d, 0x61, 0xc8, 0x92, 0x0c, 0xe0, 0xb9, 0xa7, 0x8a,
	0x6c, 0xe2, 0xd9, 0x1b, 0xd8, 0xae, 0x37, 0x37, 0xda, 0xa7, 0x91, 0x8d, 0xf6, 0x69, 0x60, 0x19,
	0xf4, 0xce, 0xa5, 0x2b, 0xc8, 0x7c, 0x4f, 0x10, 0x8d, 0x98, 0xb7, 0xf3, 0x7a, 0xe4, 0x7b, 0x82,
	0xe8, 0xec, 0xef, 0x04, 0x06, 0x53, 0x67, 0x73, 0xe5, 0xe9, 0x87, 0xa0, 0xdd, 0xd2, 0xd1, 0xd8,
	0x35, 0x80, 0x23, 0x32, 0x29, 0xa2, 0xbb, 0xe9, 0x84, 0xac, 0x61, 0x98, 0x31, 0x67, 0x44, 0x63,
	0x54, 0xe4, 0x5d, 0x9c, 0xb5, 0x9a, 0x61, 0x87, 0xb0, 0xfb, 0xea, 0xa6, 0xf7, 0xf1, 0x77, 0x63,
	0x13, 0xc6, 0x32, 0xfd, 0xa0, 0xdc, 0x52, 0x37, 0xe7, 0x7c, 0x28, 0x5a, 0x1e, 0xdf, 0x7b, 0x85,
	0x17, 0x6d, 0x50, 0x5f, 0x34, 0xa4, 0x11, 0xc3, 0x75, 0xce, 0x87, 0x35, 0xf6, 0x36, 0xde, 0xc9,
	0x9f, 0xe2, 0x9d, 0xac, 0x2f, 0x74, 0xc3, 0xce, 0xb6, 0x69, 0x72, 0x9e, 0xfd, 0x13, 0x00, 0x00,
	0xff, 0xff, 0xb9, 0xd4, 0x30, 0xfc, 0xa7, 0x09, 0x00, 0x00,
}
